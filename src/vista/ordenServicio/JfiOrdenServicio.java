package vista.ordenServicio;

// v1.0 SCN
import vista.ordenCompra.*;
import controlador.ConCentroCosto;
import controlador.ConOrdenCompra;
import controlador.ConOrdenServicio;
import controlador.ConProveedor;
import controlador.ConTipoCambio;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CentroCosto;
import modelo.ItemOrdenCompraNacional;
import modelo.OrdenCompraNacional;
import modelo.Proveedor;
import modelo.TipoCambio;
import vista.JfMenu;
import java.sql.SQLException;
import modelo.ItemOrdenServicio;
import modelo.OrdenServicio;
import vista.JfMenu;

public class JfiOrdenServicio extends javax.swing.JInternalFrame {

    public JfiOrdenServicio(String IGV) {
        this.jfiAddServicio = new JfiAddServicio(ListArticulo, IGV);
        initComponents();
        this.setSize(new Dimension(950, 520));
        this.setTitle("Nueva Orden de Servicio");

        //Limpia la lista de articulos
        ListArticulo.clear();
        //proveedor
        ComboSr.removeAllItems();
        ComboSr.addItem("Elija una opción");
        cargarComboProveedor();
        //bloqueo de campos de datos de proveedor
        InputTipDoc.setEditable(false);
        InputTipDoc.setEnabled(false);
        InputNroDoc.setEditable(false);
        InputNroDoc.setEnabled(false);
        InputDir.setEditable(false);
        InputDir.setEnabled(false);
        //rellenando IGV
        LabelTextIGV.setText("IGV (" + IGV + "%)");
        this.valIGV = IGV;
        //CentroCosto
        ComboCenCosto.removeAllItems();
        ComboCenCosto.addItem("Elija una opción");
        cargarComboCentroCosto();
        //moneda
        ComboMoneda.removeAllItems();
        ComboMoneda.addItem("Elija una opción");
        ComboMoneda.addItem("Soles");
        ComboMoneda.addItem("Dolares");
        //forma de pago
        ComboForPago.removeAllItems();
        ComboForPago.addItem("Elija una opción");
        ComboForPago.addItem("Contado");
        ComboForPago.addItem("Crédito");
        //nro2 title
        ConOrdenCompra metOrdCompra = new ConOrdenCompra();
        int ano = metOrdCompra.getAnoActual("d");
        //nr1 title 4 digitos
        getNumCorrel();
    }

    //contador para evitar la alerta de "elija una opcion" al abrir el jframe o registrar una orden de pago
    private int contadorProv = 0;

    //var IGV
    private String valIGV;

    //var tabla
    public static ArrayList<ItemOrdenServicio> ListArticulo = new ArrayList<>();
    public JfiAddServicio jfiAddServicio;

    //var tabla
    private BigDecimal totImpBruto = new BigDecimal(0);
    private BigDecimal totDescuento = new BigDecimal(0);
    private BigDecimal totSubTotal = new BigDecimal(0);
    private BigDecimal totFinal = new BigDecimal(0);
    private BigDecimal totIGV = new BigDecimal(0);

    private void cargarComboProveedor() {
        ConProveedor metodProv = new ConProveedor();
        ArrayList<Proveedor> listProveedor = metodProv.getListProveedor();

        for (int i = 0; i < listProveedor.size(); i++) {
            ComboSr.addItem(listProveedor.get(i).getNom_proveedor());
        }
    }

    private void cargarComboCentroCosto() {
        ConCentroCosto metodCenCosto = new ConCentroCosto();
        ArrayList<CentroCosto> listCentroCosto = metodCenCosto.getListCentroCosto();

        for (int i = 0; i < listCentroCosto.size(); i++) {
            ComboCenCosto.addItem(listCentroCosto.get(i).getId_cen_costo() + "-" + listCentroCosto.get(i).getNom_cen_costo());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ComboSr = new javax.swing.JComboBox<>();
        InputTipDoc = new javax.swing.JTextField();
        InputNroDoc = new javax.swing.JTextField();
        InputDir = new javax.swing.JTextField();
        InputCotizacion = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        InputFecha = new com.toedter.calendar.JDateChooser();
        InputContacto = new javax.swing.JTextField();
        InputTelefono = new javax.swing.JTextField();
        InputEmail = new javax.swing.JTextField();
        InputCtaCteBanco = new javax.swing.JTextField();
        BtnAgregarProducto = new javax.swing.JButton();
        BtnEliminarProducto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaProd = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        InputObs = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        ComboCenCosto = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        ComboMoneda = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        InputFechaEntrega = new com.toedter.calendar.JDateChooser();
        InputLugEntrega = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        InputPerSolicitud = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        ComboForPago = new javax.swing.JComboBox<>();
        LabelDias = new javax.swing.JLabel();
        SpinDias = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        LabelTextIGV = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        BtnRegistrar = new javax.swing.JButton();
        LabelImporteBruto = new javax.swing.JLabel();
        LabelDescuento = new javax.swing.JLabel();
        LabelIGV = new javax.swing.JLabel();
        LabelTotal = new javax.swing.JLabel();
        BtnActTabla = new javax.swing.JButton();
        LabelSubTotal1 = new javax.swing.JLabel();
        InputNro1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ORDEN DE SERVICIO N° ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 210, -1));

        jLabel3.setText("Señor:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        jLabel4.setText("Tipo Documento:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jLabel5.setText("Nro Documento:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        jLabel6.setText("Dirección:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jLabel7.setText("Cotización:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        ComboSr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboSr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboSrActionPerformed(evt);
            }
        });
        ComboSr.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ComboSrPropertyChange(evt);
            }
        });
        getContentPane().add(ComboSr, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 220, -1));

        InputTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTipDocActionPerformed(evt);
            }
        });
        getContentPane().add(InputTipDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 220, -1));
        getContentPane().add(InputNroDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 220, -1));
        getContentPane().add(InputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 220, -1));
        getContentPane().add(InputCotizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 220, -1));

        jLabel9.setText("fecha:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, -1, -1));

        jLabel10.setText("Contacto:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, -1, -1));

        jLabel11.setText("Telefono:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 150, -1, -1));

        jLabel12.setText("Email:");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, -1, -1));

        jLabel13.setText("Cta Cte Banco:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 210, -1, -1));

        InputFecha.setDateFormatString("yyyy/MM/dd");
        getContentPane().add(InputFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, 200, -1));

        InputContacto.setToolTipText("");
        getContentPane().add(InputContacto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, 200, -1));
        getContentPane().add(InputTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 200, -1));
        getContentPane().add(InputEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, 200, -1));

        InputCtaCteBanco.setToolTipText("");
        getContentPane().add(InputCtaCteBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 210, 200, -1));

        BtnAgregarProducto.setText("Agregar Servicio");
        BtnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarProductoActionPerformed(evt);
            }
        });
        getContentPane().add(BtnAgregarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 170, -1));

        BtnEliminarProducto.setText("Eliminar Servicio");
        BtnEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarProductoActionPerformed(evt);
            }
        });
        getContentPane().add(BtnEliminarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, 170, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Descripcion", "Unidad", "Cantidad", "Precio", "Dscto", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaProd);
        if (TablaProd.getColumnModel().getColumnCount() > 0) {
            TablaProd.getColumnModel().getColumn(0).setMinWidth(30);
            TablaProd.getColumnModel().getColumn(0).setPreferredWidth(30);
            TablaProd.getColumnModel().getColumn(0).setMaxWidth(30);
            TablaProd.getColumnModel().getColumn(1).setMinWidth(250);
            TablaProd.getColumnModel().getColumn(1).setPreferredWidth(250);
            TablaProd.getColumnModel().getColumn(1).setMaxWidth(250);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 640, 110));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 660, 130));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        InputObs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputObsActionPerformed(evt);
            }
        });
        jPanel2.add(InputObs, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 200, 30));

        jLabel14.setText("Observaciones:");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel20.setText("Centro Costo:");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        ComboCenCosto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboCenCosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCenCostoActionPerformed(evt);
            }
        });
        jPanel2.add(ComboCenCosto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 200, -1));

        jLabel21.setText("Moneda:");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        ComboMoneda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(ComboMoneda, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 200, -1));

        jLabel22.setText("Fecha entrega:");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        jLabel23.setText(" Lugar entrega:");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        InputFechaEntrega.setDateFormatString("yyyy/MM/dd");
        jPanel2.add(InputFechaEntrega, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 200, -1));
        jPanel2.add(InputLugEntrega, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 200, -1));

        jLabel24.setText("A solicitud de:");
        jPanel2.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));
        jPanel2.add(InputPerSolicitud, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 200, -1));

        jLabel25.setText("Forma pago:");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));

        ComboForPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboForPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboForPagoActionPerformed(evt);
            }
        });
        jPanel2.add(ComboForPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 120, -1));

        LabelDias.setText("Días:");
        jPanel2.add(LabelDias, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, -1, -1));

        SpinDias.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SpinDiasStateChanged(evt);
            }
        });
        jPanel2.add(SpinDias, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 340, -1, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 30, 240, 380));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Importe Bruto");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, -1, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Descuento");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, -1, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("Sub Total");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, -1, -1));

        LabelTextIGV.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LabelTextIGV.setText("I.G.V.");
        LabelTextIGV.setPreferredSize(new java.awt.Dimension(32, 215));
        getContentPane().add(LabelTextIGV, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 450, 70, 20));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel19.setText("Total");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 430, -1, -1));

        BtnRegistrar.setText("Registrar");
        BtnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRegistrarActionPerformed(evt);
            }
        });
        getContentPane().add(BtnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 420, 220, 50));

        LabelImporteBruto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelImporteBruto.setText("0.00");
        getContentPane().add(LabelImporteBruto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 420, 100, -1));

        LabelDescuento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelDescuento.setText("0.00");
        getContentPane().add(LabelDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 100, -1));

        LabelIGV.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelIGV.setText("0.00");
        getContentPane().add(LabelIGV, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 450, 70, -1));

        LabelTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        LabelTotal.setText("0.00");
        getContentPane().add(LabelTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 430, 90, -1));

        BtnActTabla.setText("Actualizar Datos");
        BtnActTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnActTablaActionPerformed(evt);
            }
        });
        getContentPane().add(BtnActTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 150, -1));

        LabelSubTotal1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelSubTotal1.setText("0.00");
        getContentPane().add(LabelSubTotal1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, 70, -1));

        InputNro1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        InputNro1.setText("0000");
        getContentPane().add(InputNro1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputObsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputObsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputObsActionPerformed

    private void ComboSrPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ComboSrPropertyChange

    }//GEN-LAST:event_ComboSrPropertyChange

    private void ComboSrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboSrActionPerformed
        ConProveedor metodProv = new ConProveedor();
        contadorProv += 1;
        try {
            if (ComboSr.getSelectedItem().equals("Elija una opción") && contadorProv > 2) {
                JOptionPane.showMessageDialog(null, "Debe indicar un proveedor");
            }
            Proveedor prov = metodProv.conProveedor("", ComboSr.getSelectedItem().toString(), "%", "%");
            if (prov.getTip_doc().equals("1")) {
                InputTipDoc.setText("RUC");
            }
            if (prov.getTip_doc().equals("2")) {
                InputTipDoc.setText("Otro documento");
            }
            InputNroDoc.setText(prov.getNum_doc());
            InputDir.setText(prov.getDir_proveedor());
        } catch (Exception e) {
            //Entra al abrir la pantalla por prmiera vez
            if (contadorProv > 2) {
                JOptionPane.showMessageDialog(null, "Error al cargar informacion de proveedor" + e);

            }
        }
    }//GEN-LAST:event_ComboSrActionPerformed

    private void ComboCenCostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCenCostoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboCenCostoActionPerformed

    private void ComboForPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboForPagoActionPerformed
        try {
            if (ComboForPago.getSelectedItem().equals("Crédito")) {
                LabelDias.setVisible(true);
                SpinDias.setVisible(true);
            } else {
                LabelDias.setVisible(false);
                SpinDias.setVisible(false);
                SpinDias.setValue("0");
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_ComboForPagoActionPerformed

    private boolean AddPrd = false;

    private void BtnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarProductoActionPerformed
        if (!AddPrd) {
            JfMenu.MenuPanel.add(jfiAddServicio);
        }
        AddPrd = true;
        jfiAddServicio.setVisible(true);

    }//GEN-LAST:event_BtnAgregarProductoActionPerformed

    private void BtnEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarProductoActionPerformed
        int rowS = TablaProd.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) TablaProd.getModel();
        modelo.removeRow(rowS);
        ListArticulo.remove(rowS);
        RellTabla();
    }//GEN-LAST:event_BtnEliminarProductoActionPerformed

    private void BtnActTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnActTablaActionPerformed
        RellTabla();
    }//GEN-LAST:event_BtnActTablaActionPerformed

    private void BtnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRegistrarActionPerformed
        boolean error = false;
        Date fecha = null;
        Date fechaEntrega = null;
        ConTipoCambio metodTipCam = new ConTipoCambio();

        if (ListArticulo.size() == 0) {
            JOptionPane.showMessageDialog(null, "Debe agregar como minimo un producto");
            error = true;
        }

        try {
            fechaEntrega = new Date(InputFechaEntrega.getDate().getTime());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Debe ingresar una fecha de entrega valida");
            error = true;
        }

        if (ComboSr.getSelectedItem().equals("Elija una opción")) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe indicar un proveedor para grabar");
        }

        try {
            fecha = new Date(InputFecha.getDate().getTime());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Debe ingresar una fecha valida");
            error = true;
        }

        if (ComboCenCosto.getSelectedItem().equals("Elija una opción")) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe indicar un centro de costo para grabar");
        }

        if (ComboMoneda.getSelectedItem().equals("Elija una opción")) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe indicar un tipo de moneda para grabar");
        }

        if (ComboForPago.getSelectedItem().equals("Elija una opción")) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe indicar una forma de pago para grabar");
        }

        if (ComboForPago.getSelectedItem().equals("Crédito")) {
            if (Integer.parseInt(SpinDias.getValue().toString()) == 0) {
                error = true;
                JOptionPane.showMessageDialog(null, "Debe indicar una cantidad de dias a pagar para grabar");
            }
        }

        if (ComboSr.getSelectedItem().equals("Elija una opción")) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe indicar un proveedor para grabar");
        }

        if (ListArticulo.size() != TablaProd.getRowCount()) {
            error = true;
            JOptionPane.showMessageDialog(null, "La cantidad de articulos ingresados es mayor a la cantidad mostrada en el formato, favor de actualizar para corregir el error");
        }

        if (metodTipCam.conFecha(fecha).getFec_tip_cambio() == null) {
            error = true;
            JOptionPane.showMessageDialog(null, "Favor de ingresar primero el tipo de cambio para la fecha de la orden para continuar con el registro");
        }

        if (ListArticulo.size() < 1) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe agregar como minimo un articulo");
        }

        if (!error) {
            OrdenServicio servicio = new OrdenServicio();
            ConOrdenServicio controllerServicio = new ConOrdenServicio();
            ConOrdenCompra controllerCompra = new ConOrdenCompra();
            ItemOrdenServicio item = new ItemOrdenServicio();
            ConProveedor metodProv = new ConProveedor();
            int idProveedor = metodProv.conProveedor("", ComboSr.getSelectedItem().toString(), "%", "%").getId_proveedor();
            String[] split = ComboCenCosto.getSelectedItem().toString().split("-");
            String IdCenCosto = split[0];

            servicio.setAno(controllerCompra.getAnoActual("c"));
            servicio.setNumero(controllerServicio.getUltOrdenServicio() + 1);

            String fec = String.valueOf(fecha);
            String[] split1 = fec.split("-");
            int periodo = Integer.parseInt(split1[1]);

            servicio.setPeriodo(periodo);
            servicio.setProveedor(idProveedor);
            servicio.setCotizacion(InputCotizacion.getText());
            servicio.setFecha(fecha);
            servicio.setContacto(InputContacto.getText());
            servicio.setTelefono(InputTelefono.getText());
            servicio.setEmail(InputEmail.getText());
            servicio.setCta_cte_banco(InputCtaCteBanco.getText());
            servicio.setCen_costo(IdCenCosto);
            servicio.setFec_entrega(fechaEntrega);
            servicio.setEnt_lugar(InputLugEntrega.getText());
            if (ComboForPago.getSelectedItem().toString().equals("Crédito")) {
                servicio.setFor_pago("C");
            } else if (ComboForPago.getSelectedItem().toString().equals("Contado")) {
                servicio.setFor_pago("E");
            }

            if (servicio.getFor_pago().equals("C")) {
                servicio.setDias_pago(Integer.parseInt(SpinDias.getValue().toString()));
            } else {
                servicio.setDias_pago(0);
            }

            servicio.setPer_sol(InputPerSolicitud.getText());

            if (ComboMoneda.getSelectedItem().toString().equals("Soles")) {
                servicio.setImp_bruto_sol(new BigDecimal(LabelImporteBruto.getText()));
                servicio.setDto_sol(new BigDecimal(LabelDescuento.getText()));
                servicio.setSub_tot_sol(new BigDecimal(LabelSubTotal1.getText()));
                servicio.setTotal_sol(new BigDecimal(LabelTotal.getText()));
            }

            if (ComboMoneda.getSelectedItem().toString().equals("Dolares")) {
                servicio.setImp_bruto_dol(new BigDecimal(LabelImporteBruto.getText()));
                servicio.setDto_dol(new BigDecimal(LabelDescuento.getText()));
                servicio.setSub_tot_dol(new BigDecimal(LabelSubTotal1.getText()));
                servicio.setTotal_dol(new BigDecimal(LabelTotal.getText()));
            }

            servicio.setIgv(Integer.parseInt(valIGV));
            servicio.setObservaciones(InputObs.getText());

            int contador = 0;

            try {
                if (controllerServicio.insOrdServicio(servicio, (ComboMoneda.getSelectedItem().toString()))) {

                    for (int i = 0; i < ListArticulo.size(); i++) {
                        ListArticulo.get(i).setRef_ano(controllerCompra.getAnoActual("c"));
                        ListArticulo.get(i).setRef_numero(servicio.getNumero());
                        ListArticulo.get(i).setRef_periodo(periodo);
                        ListArticulo.get(i).setNro_item(i + 1);
                        try {
                            controllerServicio.insItemOrdServicio(ListArticulo.get(i));
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Error al momento de registrar el item " + ListArticulo.get(i).getDescripcion() + ", favor de revisar los datos ingresados");
                        }
                        contador += 1;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error al momento de guardar la cabecera de servicio. Revisar los datos ingresados");
                }
            } catch (HeadlessException e) {
                JOptionPane.showConfirmDialog(null, e);
            }
            if ((contador) == ListArticulo.size()) {
                JOptionPane.showMessageDialog(null, "Se agrego la Orden de Servicio " + servicio.getNumero() + "-" + controllerCompra.getAnoActual("d") + " satisfactoriamente.");
                ComboSr.setSelectedItem("Elija una opción");
                contadorProv = 0;
                InputCotizacion.setText("");
                InputFecha.setDate(null);
                InputContacto.setText("");
                InputTelefono.setText("");
                InputEmail.setText("");
                InputCtaCteBanco.setText("");
                DefaultTableModel modelo = (DefaultTableModel) TablaProd.getModel();
                int row = TablaProd.getRowCount() - 1;
                for (int i = row; i >= 0; i--) {
                    modelo.removeRow(TablaProd.getRowCount() - 1);
                }
                LabelImporteBruto.setText("0.00");
                LabelDescuento.setText("0.00");
                LabelIGV.setText("0.00");
                LabelSubTotal1.setText("0.00");
                LabelTotal.setText("0.00");
                totDescuento = new BigDecimal(0);
                totFinal = new BigDecimal(0);
                totIGV = new BigDecimal(0);
                totImpBruto = new BigDecimal(0);
                totSubTotal = new BigDecimal(0);
                InputObs.setText("");
                ComboCenCosto.setSelectedItem("Elija una opción");
                ComboMoneda.setSelectedItem("Elija una opción");
                InputFechaEntrega.setDate(null);
                InputLugEntrega.setText("");
                InputPerSolicitud.setText("");
                ComboForPago.setSelectedItem("Elija una opción");
                SpinDias.setValue(0);
                ListArticulo.clear();
                getNumCorrel();
            }

        }
    }//GEN-LAST:event_BtnRegistrarActionPerformed

    private void SpinDiasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SpinDiasStateChanged
        try {
            int cantidad = Integer.parseInt(SpinDias.getValue().toString());

            if (cantidad < 0) {
                JOptionPane.showMessageDialog(null, "La cantidad minima es 1");
                SpinDias.setValue(1);
            }
        } catch (HeadlessException | NumberFormatException e) {
            System.out.println("Error: " + e);
            JOptionPane.showMessageDialog(null, "Indique un numero entero valido" + e);
            SpinDias.setValue(1);
        }
    }//GEN-LAST:event_SpinDiasStateChanged

    private void InputTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTipDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputTipDocActionPerformed

    private void RellTabla() {
        totFinal = new BigDecimal(0);
        totDescuento = new BigDecimal(0);
        totSubTotal = new BigDecimal(0);
        totImpBruto = new BigDecimal(0);
        totIGV = new BigDecimal(0);
        BigDecimal montoIngresado = new BigDecimal(0); //con IGV

        DefaultTableModel modelo = (DefaultTableModel) TablaProd.getModel();
        modelo.setRowCount(ListArticulo.size());
        for (int i = 0; i < ListArticulo.size(); i++) {
            TablaProd.setValueAt(i + 1, i, 0);
            TablaProd.setValueAt(ListArticulo.get(i).getDescripcion(), i, 1);
            TablaProd.setValueAt(ListArticulo.get(i).getUnidad(), i, 2);
            TablaProd.setValueAt(ListArticulo.get(i).getCantidad(), i, 3);
            TablaProd.setValueAt(ListArticulo.get(i).getDescuento(), i, 5);
            TablaProd.setValueAt(ListArticulo.get(i).getPre_unitario(), i, 4);
            TablaProd.setValueAt(ListArticulo.get(i).getImporte(), i, 6);

            BigDecimal precioU = ListArticulo.get(i).getPre_unitario().multiply(new BigDecimal(String.valueOf(ListArticulo.get(i).getCantidad())));

            totImpBruto = totImpBruto.add(precioU);
            totDescuento = totDescuento.add(ListArticulo.get(i).getDescuento());
            totSubTotal = totImpBruto.subtract(totDescuento);
            totIGV = totSubTotal.multiply(new BigDecimal(String.valueOf("0." + valIGV)));
            totFinal = totSubTotal.add(totIGV);

            if (ListArticulo.get(i).isIGV()) {
                montoIngresado = montoIngresado.add(ListArticulo.get(i).getMontoUniIng());
            } else {
                montoIngresado = montoIngresado.add(precioU.subtract(ListArticulo.get(i).getDescuento()).multiply(new BigDecimal(String.valueOf("0." + valIGV))));
            }

            totFinal = totFinal.setScale(2, RoundingMode.HALF_UP);
            totDescuento = totDescuento.setScale(2, RoundingMode.HALF_UP);
            totSubTotal = totSubTotal.setScale(2, RoundingMode.HALF_UP);
            totImpBruto = totImpBruto.setScale(2, RoundingMode.HALF_UP);
            totIGV = totIGV.setScale(2, RoundingMode.HALF_UP);

            LabelImporteBruto.setText(String.valueOf(totImpBruto));
            LabelDescuento.setText(String.valueOf(totDescuento));
            LabelSubTotal1.setText(String.valueOf(totSubTotal));
            LabelTotal.setText(String.valueOf(totFinal));
            LabelIGV.setText(String.valueOf(totIGV));

            if (montoIngresado.compareTo(totFinal) != 0 && ListArticulo.get(i).isIGV()) {
                LabelTotal.setText(String.valueOf(montoIngresado));
                LabelIGV.setText(String.valueOf(montoIngresado.subtract(totSubTotal)));
            }

        }

        if (ListArticulo.size() == 0) {
            LabelImporteBruto.setText("0.00");
            LabelDescuento.setText("0.00");
            LabelSubTotal1.setText("0.00");
            LabelTotal.setText("0.00");
            LabelIGV.setText("0.00");
        }

    }

    private void getNumCorrel() {
        ConOrdenServicio metodOCN = new ConOrdenServicio();
        int UltOCN = metodOCN.getUltOrdenServicio() + 1;
        if (UltOCN < 10) {
            InputNro1.setText("000" + String.valueOf(UltOCN));
        } else if (UltOCN < 100) {
            InputNro1.setText("00" + String.valueOf(UltOCN));
        } else if (UltOCN < 1000) {
            InputNro1.setText("0" + String.valueOf(UltOCN));
        } else if (UltOCN < 10000) {
            InputNro1.setText(String.valueOf(UltOCN));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnActTabla;
    private javax.swing.JButton BtnAgregarProducto;
    private javax.swing.JButton BtnEliminarProducto;
    private javax.swing.JButton BtnRegistrar;
    private javax.swing.JComboBox<String> ComboCenCosto;
    private javax.swing.JComboBox<String> ComboForPago;
    private javax.swing.JComboBox<String> ComboMoneda;
    private javax.swing.JComboBox<String> ComboSr;
    private javax.swing.JTextField InputContacto;
    private javax.swing.JTextField InputCotizacion;
    private javax.swing.JTextField InputCtaCteBanco;
    private javax.swing.JTextField InputDir;
    private javax.swing.JTextField InputEmail;
    private com.toedter.calendar.JDateChooser InputFecha;
    private com.toedter.calendar.JDateChooser InputFechaEntrega;
    private javax.swing.JTextField InputLugEntrega;
    private javax.swing.JLabel InputNro1;
    private javax.swing.JTextField InputNroDoc;
    private javax.swing.JTextField InputObs;
    private javax.swing.JTextField InputPerSolicitud;
    private javax.swing.JTextField InputTelefono;
    private javax.swing.JTextField InputTipDoc;
    private javax.swing.JLabel LabelDescuento;
    private javax.swing.JLabel LabelDias;
    private javax.swing.JLabel LabelIGV;
    private javax.swing.JLabel LabelImporteBruto;
    private javax.swing.JLabel LabelSubTotal1;
    private javax.swing.JLabel LabelTextIGV;
    private javax.swing.JLabel LabelTotal;
    private javax.swing.JSpinner SpinDias;
    public static javax.swing.JTable TablaProd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
